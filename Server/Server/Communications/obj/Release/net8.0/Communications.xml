<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Communications</name>
    </assembly>
    <members>
        <member name="T:Communications.Connections.ConcurrentConnections`1">
            <summary>
            Represents a connection manager for SignalR hubs, allowing to add, remove, and retrieve connections.
            </summary>
            <typeparam name="T">The type of the hub that this connection manager is associated with. 
            Must be derived from <see cref="T:Microsoft.AspNetCore.SignalR.Hub"/>.</typeparam>
        </member>
        <member name="M:Communications.Connections.ConcurrentConnections`1.AddConnection(System.String,System.String)">
            <summary>
            Adds a new connection to the manager.
            </summary>
            <param name="connectionId">The unique identifier for the connection.</param>
            <param name="userId">The unique identifier for the user associated with the connection.</param>
        </member>
        <member name="M:Communications.Connections.ConcurrentConnections`1.RemoveConnection(System.String)">
            <summary>
            Removes a connection from the manager.
            </summary>
            <param name="connectionId">The unique identifier for the connection to be removed.</param>
        </member>
        <member name="M:Communications.Connections.ConcurrentConnections`1.GetConnection(System.String)">
            <summary>
            Retrieves the user ID associated with a specific connection ID.
            </summary>
            <param name="connectionId">The unique identifier for the connection.</param>
            <returns>The user ID associated with the connection, or null if the connection does not exist.</returns>
        </member>
        <member name="M:Communications.Connections.ConcurrentConnections`1.GetConnections">
            <summary>
            Gets a list of all active connection IDs.
            </summary>
            <returns>A list of connection IDs currently managed by this instance.</returns>
        </member>
        <member name="T:Communications.Hubs.AlarmHub">
            <summary>
            WebSocket Alarm hub for real-time communication.
            This hub is responsible for sending alarm messages to connected clients.
            </summary>
        </member>
        <member name="M:Communications.Hubs.AlarmHub.#ctor(System.Collections.Generic.List{Entities.Entities.Alarm},Communications.Connections.ConcurrentConnections{Communications.Hubs.AlarmHub},Shared.Services.ProducerService,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Communications.Hubs.AlarmHub"/> class.
            </summary>
            <param name="alarms">The list of alarms to be monitored.</param>
            <param name="connections">The connection manager for handling client connections.</param>
            <param name="configuration">Application configuration settings.</param>
            <param name="memoryCache">Memory cache for storing alarm states.</param>
            <param name="producerService">Producer for Kafka.</param>
        </member>
        <member name="M:Communications.Hubs.AlarmHub.Send(System.Guid)">
            <summary>
            Sends the message with alarm to the specified client.
            This method continuously checks for new alarms and sends them to the client until the connection is closed.
            </summary>
            <param name="clientId">The ID (GUID) of the client that accesses the method.</param>
            <returns>A task that represents the asynchronous operation. 
            The task result contains an <see cref="T:Communications.DTO.AlarmServerDTO"/> object.</returns>
        </member>
        <member name="M:Communications.Hubs.AlarmHub.OnConnectedAsync">
            <summary>
            Invoked when a new client connects to the hub.
            Adds the connection to the connection manager and notifies other clients.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Communications.Hubs.AlarmHub.OnDisconnectedAsync(System.Exception)">
            <summary>
            Invoked when a client disconnects from the hub.
            Removes the connection from the connection manager and notifies other clients.
            </summary>
            <param name="exception">The exception that caused the disconnection, if any.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Communications.Hubs.AlarmHub.OnReconnectedAsync(System.Guid)">
            <summary>
            Invoked when a client reconnects to the hub.
            Notifies other clients about the reconnection and resends alarms to the reconnected client.
            </summary>
            <param name="clientId">The ID of the client that is reconnecting.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Communications.Hubs.NotificationHub">
            <summary>
            WebSocket Notification hub for real-time communication.
            This hub is responsible for sending notifications messages to connected clients.
            </summary>
        </member>
        <member name="M:Communications.Hubs.NotificationHub.#ctor(System.Collections.Generic.List{Entities.Entities.Notification},Communications.Connections.ConcurrentConnections{Communications.Hubs.NotificationHub},Microsoft.Extensions.Caching.Memory.IMemoryCache,Microsoft.Extensions.Configuration.IConfiguration,Shared.Services.ProducerService)">
            <summary>
            Initializes a new instance of the <see cref="T:Communications.Hubs.NotificationHub"/> class.
            </summary>
            <param name="notifications">The list of notifications to be monitored.</param>
            <param name="connections">The connection manager for handling client connections.</param>
            <param name="configuration">Application configuration settings.</param>
            <param name="memoryCache">Memory cache for storing alarm states.</param>
            <param name="producerService">Producer for Kafka.</param>
        </member>
        <member name="M:Communications.Hubs.NotificationHub.Send(System.Guid)">
            <summary>
            Sends the message with notification to the specified client.
            This method continuously checks for new notifications and sends them to the client until the connection is closed.
            </summary>
            <param name="clientId">The ID (GUID) of the client that accesses the method.</param>
            <returns>A task that represents the asynchronous operation. 
            The task result contains an <see cref="T:Communications.DTO.MessageServerDTO"/> object.</returns>
        </member>
        <member name="M:Communications.Hubs.NotificationHub.OnConnectedAsync">
            <summary>
            Invoked when a new client connects to the hub.
            Adds the connection to the connection manager and notifies other clients.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Communications.Hubs.NotificationHub.OnDisconnectedAsync(System.Exception)">
            <summary>
            Invoked when a client disconnects from the hub.
            Removes the connection from the connection manager and notifies other clients.
            </summary>
            <param name="exception">The exception that caused the disconnection, if any.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Communications.Hubs.NotificationHub.OnReconnectedAsync(System.Guid)">
            <summary>
            Invoked when a client reconnects to the hub.
            Notifies other clients about the reconnection and resends notifications to the reconnected client.
            </summary>
            <param name="clientId">The ID of the client that is reconnecting.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Communications.Program.Main">
            <summary>
            The main method definies work threads, creates instances of work units, etc.
            </summary>
            <remarks>
            <see cref="T:Interactors.Helpers.LoggerSetupHelper"/>
            <see cref="T:Communications.UoW.UnitOfWorkGetConfig"/>
            <see cref="T:Communications.UoW.UnitOfWorkGetConfig"/>
            <see cref="T:Interactors.Helpers.CheckHashHalper"/>
            </remarks>
        </member>
        <member name="M:Communications.Program.StartKafkaProducer">
            <summary>
            Starts the Kafka producer to send messages to Kafka.
            </summary>
            <remarks>
            This method creates a new instance of <see cref="T:System.Threading.CancellationTokenSource"/> and starts an asynchronous task
            that sends messages to the "client-metric-topic" with a delay of 100 milliseconds.
            The task will continue to run until it is canceled using the cancellation token.
            </remarks>
        </member>
        <member name="M:Communications.Program.StartListenNotifications">
            <summary>
            Starts listening for notifications from the database.
            </summary>
            <remarks>
            This method uses a lock to ensure thread safety. 
            It creates a new instance of <see cref="T:System.Threading.CancellationTokenSource"/> and 
            starts the process of retrieving all notifications using 
            <see cref="T:Communications.UoW.UnitOfWorkGetNotifications"/>.
            </remarks>
        </member>
        <member name="M:Communications.Program.StartListenAlarms">
            <summary>
            Starts listening for alarms from the database.
            </summary>
            <remarks>
            This method uses a lock to ensure thread safety. 
            It creates a new instance of <see cref="T:System.Threading.CancellationTokenSource"/> and 
            starts the process of retrieving all alarms using 
            <see cref="T:Communications.UoW.UnitOfWorkGetAlarms"/>.
            </remarks>
        </member>
        <member name="M:Communications.Program.GetEventChangeConfiguration">
            <summary>
            A method that always expects to receive any changes in the configuration file. 
            The action is determined depending on which setting has been changed.
            </summary>
        </member>
        <member name="M:Communications.Program.CreateAndRunHostServer">
            <summary>
            Creates and starts a host server with the web application's settings.
            </summary>
            <remarks>
            This method configures the host server, adds necessary services and configurations, including:
            <list type="bullet">
            <item>Configuring CORS to manage access to the API.</item>
            <item>Adding Swagger for API documentation.</item>
            <item>Configuring SignalR for working with WebSockets.</item>
            <item>Registering various providers and stores for notifications and alarms.</item>
            </list>
            The method uses settings from the configuration file, such as host URLs and allowed origins.
            </remarks>
        </member>
        <member name="T:Communications.UoW.UnitOfWorkGetAlarms">
            <summary>
            Represents a unit of work for retrieving alarms from the database.
            Implements the <see cref="T:System.IDisposable"/> interface to manage resources.
            </summary>
        </member>
        <member name="F:Communications.UoW.UnitOfWorkGetAlarms.ReceivedAlarmsList">
            <summary>
            Gets the list of received alarms.
            </summary>
        </member>
        <member name="P:Communications.UoW.UnitOfWorkGetAlarms.Alarms">
            <summary>
            Gets the instance of the <see cref="T:Repositories.Alarms.AlarmRepository"/> associated with this unit of work.
            </summary>
        </member>
        <member name="M:Communications.UoW.UnitOfWorkGetAlarms.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Communications.UoW.UnitOfWorkGetAlarms"/> class.
            </summary>
            <param name="configuration">The configuration settings for the application.</param>
        </member>
        <member name="M:Communications.UoW.UnitOfWorkGetAlarms.GetAllAlarms(System.Threading.CancellationToken)">
            <summary>
            Continuously retrieves alarms from the database until cancellation is requested.
            </summary>
            <param name="cancellationToken">A token to monitor for cancellation requests.</param>
        </member>
        <member name="M:Communications.UoW.UnitOfWorkGetAlarms.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Communications.UoW.UnitOfWorkGetAlarms"/> class 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">If true, managed resources will be disposed; otherwise, only unmanaged resources will be released.</param>
        </member>
        <member name="M:Communications.UoW.UnitOfWorkGetAlarms.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Communications.UoW.UnitOfWorkGetAlarms"/> class.
            </summary>
        </member>
        <member name="T:Communications.UoW.UnitOfWorkGetConfig">
            <summary>
            Represents a unit of work for managing application configuration settings.
            </summary>
        </member>
        <member name="F:Communications.UoW.UnitOfWorkGetConfig.Configuration">
            <summary>
            Gets the application configuration.
            </summary>
        </member>
        <member name="F:Communications.UoW.UnitOfWorkGetConfig.sectionHashes">
            <summary>
            A dictionary that stores hashes of configuration sections.
            </summary>
        </member>
        <member name="M:Communications.UoW.UnitOfWorkGetConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Communications.UoW.UnitOfWorkGetConfig"/> class.
            Loads the configuration from the specified JSON file and sets up change tokens for reloading.
            </summary>
        </member>
        <member name="M:Communications.UoW.UnitOfWorkGetConfig.LoadConfigFile">
            <summary>
            Loads the configuration file and validates its contents against a schema.
            If valid, calculates hashes for specific sections; otherwise, loads default configuration.
            </summary>
        </member>
        <member name="T:Communications.UoW.UnitOfWorkGetNotifications">
            <summary>
            Represents a unit of work for managing and retrieving notifications.
            Implements the <see cref="T:System.IDisposable"/> interface to manage resources.
            </summary>
        </member>
        <member name="F:Communications.UoW.UnitOfWorkGetNotifications.ReceivedNotificationsList">
            <summary>
            Gets the list of received notifications.
            </summary>
        </member>
        <member name="P:Communications.UoW.UnitOfWorkGetNotifications.Notifications">
            <summary>
            Gets the notification repository instance.
            </summary>
        </member>
        <member name="M:Communications.UoW.UnitOfWorkGetNotifications.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Communications.UoW.UnitOfWorkGetNotifications"/> class.
            </summary>
            <param name="configuration">The application configuration.</param>
        </member>
        <member name="M:Communications.UoW.UnitOfWorkGetNotifications.GetAllNotifications(System.Threading.CancellationToken)">
            <summary>
            Continuously retrieves notifications until cancellation is requested.
            Adds new notifications to the <see cref="F:Communications.UoW.UnitOfWorkGetNotifications.ReceivedNotificationsList"/> if they are not already present.
            </summary>
            <param name="cancellationToken">A token for cancelling the operation.</param>
        </member>
        <member name="M:Communications.UoW.UnitOfWorkGetNotifications.Dispose(System.Boolean)">
            <summary>
            Disposes the resources used by the <see cref="T:Communications.UoW.UnitOfWorkGetNotifications"/> class.
            </summary>
            <param name="disposing">A boolean indicating whether the method was called directly or by the garbage collector.</param>
        </member>
        <member name="M:Communications.UoW.UnitOfWorkGetNotifications.Dispose">
            <summary>
            Disposes the resources used by the <see cref="T:Communications.UoW.UnitOfWorkGetNotifications"/> class.
            </summary>
        </member>
    </members>
</doc>
